generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model categories {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  courses     courses[]
}

model certificates {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id      String    @db.Uuid
  course_id       String    @db.Uuid
  template_url    String?
  certificate_url String?
  grade           String?
  score           Float?
  issued_at       DateTime  @default(now())
  expires_at      DateTime?
  courses         courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  profiles        profiles  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, course_id])
}

model courses {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  instructor_id String         @db.Uuid
  category_id   String         @db.Uuid
  thumbnail_url String?
  price         Decimal?       @db.Decimal(10, 2)
  is_published  Boolean        @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime
  certificates  certificates[]
  categories    categories     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  profiles      profiles       @relation(fields: [instructor_id], references: [id], onDelete: Cascade)
  modules       modules[]
  purchases     purchases[]
  resources     resources[]
  reviews       reviews[]
}

model invoices {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchase_id    String    @unique @db.Uuid
  invoice_number String    @unique
  payment_date   DateTime
  payment_method String
  total_amount   Decimal   @db.Decimal(10, 2)
  status         String    @default("SUCCESS")
  category       String?
  course_name    String
  student_name   String
  created_at     DateTime  @default(now())
  updated_at     DateTime
  purchases      purchases @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
}

model lessons {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_id  String     @db.Uuid
  title      String
  content    String?
  video_url  String?
  is_free    Boolean    @default(false)
  created_at DateTime   @default(now())
  updated_at DateTime
  module_id  String     @db.Uuid
  modules    modules    @relation(fields: [module_id], references: [id], onDelete: Cascade)
  progress   progress[]
}

model modules {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_id  String    @db.Uuid
  title      String
  created_at DateTime  @default(now())
  updated_at DateTime
  lessons    lessons[]
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model paypal_customers {
  student_id       String   @unique @db.Uuid
  paypalCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profiles         profiles @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model profiles {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String            @unique @db.Uuid
  email            String?           @unique
  full_name        String?
  avatar_url       String?
  role             Role              @default(STUDENT)
  bio              String?
  phone            String?
  is_active        Boolean           @default(true)
  created_at       DateTime          @default(now())
  updated_at       DateTime
  certificates     certificates[]
  courses          courses[]
  paypal_customers paypal_customers?
  progress         progress[]
  purchases        purchases[]
  reviews          reviews[]
}

model progress {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id   String    @db.Uuid
  lesson_id    String    @db.Uuid
  is_completed Boolean   @default(false)
  completed_at DateTime?
  watch_time   Int       @default(0)
  last_watched DateTime?
  lessons      lessons   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  profiles     profiles  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, lesson_id])
}

model purchases {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String    @db.Uuid
  course_id  String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  invoices   invoices?
  courses    courses   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  profiles   profiles  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, course_id])
  @@index([course_id])
}

model resources {
  course_id String   @db.Uuid
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courses   courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([course_id])
}

model reviews {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  course_id  String   @db.Uuid
  student_id String   @db.Uuid
  rating     Int      @db.SmallInt
  comment    String?
  is_public  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime
  courses    courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  profiles   profiles @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([course_id, student_id])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}
